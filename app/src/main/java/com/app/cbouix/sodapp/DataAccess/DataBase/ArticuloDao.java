package com.app.cbouix.sodapp.DataAccess.DataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICULO.
*/
public class ArticuloDao extends AbstractDao<Articulo, Long> {

    public static final String TABLENAME = "ARTICULO";

    /**
     * Properties of entity Articulo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Codigo = new Property(1, String.class, "Codigo", false, "CODIGO");
        public final static Property Nombre = new Property(2, String.class, "Nombre", false, "NOMBRE");
        public final static Property Precio = new Property(3, Double.class, "Precio", false, "PRECIO");
        public final static Property UnidadMedida = new Property(4, String.class, "UnidadMedida", false, "UNIDAD_MEDIDA");
    };


    public ArticuloDao(DaoConfig config) {
        super(config);
    }
    
    public ArticuloDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICULO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CODIGO' TEXT," + // 1: Codigo
                "'NOMBRE' TEXT," + // 2: Nombre
                "'PRECIO' REAL," + // 3: Precio
                "'UNIDAD_MEDIDA' TEXT);"); // 4: UnidadMedida
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICULO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Articulo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Codigo = entity.getCodigo();
        if (Codigo != null) {
            stmt.bindString(2, Codigo);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(3, Nombre);
        }
 
        Double Precio = entity.getPrecio();
        if (Precio != null) {
            stmt.bindDouble(4, Precio);
        }
 
        String UnidadMedida = entity.getUnidadMedida();
        if (UnidadMedida != null) {
            stmt.bindString(5, UnidadMedida);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Articulo readEntity(Cursor cursor, int offset) {
        Articulo entity = new Articulo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Codigo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Nombre
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Precio
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // UnidadMedida
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Articulo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrecio(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setUnidadMedida(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Articulo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Articulo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
