package com.app.cbouix.sodapp.DataAccess.DataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COBRANZA.
*/
public class CobranzaDao extends AbstractDao<Cobranza, Long> {

    public static final String TABLENAME = "COBRANZA";

    /**
     * Properties of entity Cobranza.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsRemito = new Property(1, Boolean.class, "IsRemito", false, "IS_REMITO");
        public final static Property Emision = new Property(2, String.class, "Emision", false, "EMISION");
        public final static Property Numero = new Property(3, String.class, "Numero", false, "NUMERO");
        public final static Property Importe = new Property(4, Double.class, "Importe", false, "IMPORTE");
        public final static Property ImporteAplicado = new Property(5, Double.class, "ImporteAplicado", false, "IMPORTE_APLICADO");
        public final static Property ClienteId = new Property(6, Integer.class, "ClienteId", false, "CLIENTE_ID");
        public final static Property ClienteCod = new Property(7, String.class, "ClienteCod", false, "CLIENTE_COD");
        public final static Property ClienteNombre = new Property(8, String.class, "ClienteNombre", false, "CLIENTE_NOMBRE");
        public final static Property DomicilioId = new Property(9, Integer.class, "DomicilioId", false, "DOMICILIO_ID");
        public final static Property Domicilio = new Property(10, String.class, "Domicilio", false, "DOMICILIO");
        public final static Property RepartidorId = new Property(11, Integer.class, "RepartidorId", false, "REPARTIDOR_ID");
    };


    public CobranzaDao(DaoConfig config) {
        super(config);
    }
    
    public CobranzaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COBRANZA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IS_REMITO' INTEGER," + // 1: IsRemito
                "'EMISION' TEXT," + // 2: Emision
                "'NUMERO' TEXT," + // 3: Numero
                "'IMPORTE' REAL," + // 4: Importe
                "'IMPORTE_APLICADO' REAL," + // 5: ImporteAplicado
                "'CLIENTE_ID' INTEGER," + // 6: ClienteId
                "'CLIENTE_COD' TEXT," + // 7: ClienteCod
                "'CLIENTE_NOMBRE' TEXT," + // 8: ClienteNombre
                "'DOMICILIO_ID' INTEGER," + // 9: DomicilioId
                "'DOMICILIO' TEXT," + // 10: Domicilio
                "'REPARTIDOR_ID' INTEGER);"); // 11: RepartidorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COBRANZA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cobranza entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean IsRemito = entity.getIsRemito();
        if (IsRemito != null) {
            stmt.bindLong(2, IsRemito ? 1l: 0l);
        }
 
        String Emision = entity.getEmision();
        if (Emision != null) {
            stmt.bindString(3, Emision);
        }
 
        String Numero = entity.getNumero();
        if (Numero != null) {
            stmt.bindString(4, Numero);
        }
 
        Double Importe = entity.getImporte();
        if (Importe != null) {
            stmt.bindDouble(5, Importe);
        }
 
        Double ImporteAplicado = entity.getImporteAplicado();
        if (ImporteAplicado != null) {
            stmt.bindDouble(6, ImporteAplicado);
        }
 
        Integer ClienteId = entity.getClienteId();
        if (ClienteId != null) {
            stmt.bindLong(7, ClienteId);
        }
 
        String ClienteCod = entity.getClienteCod();
        if (ClienteCod != null) {
            stmt.bindString(8, ClienteCod);
        }
 
        String ClienteNombre = entity.getClienteNombre();
        if (ClienteNombre != null) {
            stmt.bindString(9, ClienteNombre);
        }
 
        Integer DomicilioId = entity.getDomicilioId();
        if (DomicilioId != null) {
            stmt.bindLong(10, DomicilioId);
        }
 
        String Domicilio = entity.getDomicilio();
        if (Domicilio != null) {
            stmt.bindString(11, Domicilio);
        }
 
        Integer RepartidorId = entity.getRepartidorId();
        if (RepartidorId != null) {
            stmt.bindLong(12, RepartidorId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cobranza readEntity(Cursor cursor, int offset) {
        Cobranza entity = new Cobranza( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // IsRemito
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Emision
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Numero
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // Importe
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // ImporteAplicado
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ClienteId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ClienteCod
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ClienteNombre
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // DomicilioId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Domicilio
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // RepartidorId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cobranza entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsRemito(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setEmision(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumero(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImporte(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setImporteAplicado(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setClienteId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setClienteCod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClienteNombre(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDomicilioId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDomicilio(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRepartidorId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cobranza entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cobranza entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
