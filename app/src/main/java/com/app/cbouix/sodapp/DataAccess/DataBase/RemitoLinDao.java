package com.app.cbouix.sodapp.DataAccess.DataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REMITO_LIN.
*/
public class RemitoLinDao extends AbstractDao<RemitoLin, Long> {

    public static final String TABLENAME = "REMITO_LIN";

    /**
     * Properties of entity RemitoLin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemitoId = new Property(1, Long.class, "RemitoId", false, "REMITO_ID");
        public final static Property ArticuloId = new Property(2, Integer.class, "ArticuloId", false, "ARTICULO_ID");
        public final static Property ArticuloCod = new Property(3, String.class, "ArticuloCod", false, "ARTICULO_COD");
        public final static Property ArticuloNombre = new Property(4, String.class, "ArticuloNombre", false, "ARTICULO_NOMBRE");
        public final static Property Cantidad = new Property(5, Integer.class, "Cantidad", false, "CANTIDAD");
        public final static Property UnMedidaCod = new Property(6, String.class, "UnMedidaCod", false, "UN_MEDIDA_COD");
        public final static Property TipoCod = new Property(7, String.class, "TipoCod", false, "TIPO_COD");
        public final static Property Signo = new Property(8, Integer.class, "Signo", false, "SIGNO");
        public final static Property Precio = new Property(9, Double.class, "Precio", false, "PRECIO");
    };


    public RemitoLinDao(DaoConfig config) {
        super(config);
    }
    
    public RemitoLinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REMITO_LIN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REMITO_ID' INTEGER," + // 1: RemitoId
                "'ARTICULO_ID' INTEGER," + // 2: ArticuloId
                "'ARTICULO_COD' TEXT," + // 3: ArticuloCod
                "'ARTICULO_NOMBRE' TEXT," + // 4: ArticuloNombre
                "'CANTIDAD' INTEGER," + // 5: Cantidad
                "'UN_MEDIDA_COD' TEXT," + // 6: UnMedidaCod
                "'TIPO_COD' TEXT," + // 7: TipoCod
                "'SIGNO' INTEGER," + // 8: Signo
                "'PRECIO' REAL);"); // 9: Precio
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REMITO_LIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RemitoLin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long RemitoId = entity.getRemitoId();
        if (RemitoId != null) {
            stmt.bindLong(2, RemitoId);
        }
 
        Integer ArticuloId = entity.getArticuloId();
        if (ArticuloId != null) {
            stmt.bindLong(3, ArticuloId);
        }
 
        String ArticuloCod = entity.getArticuloCod();
        if (ArticuloCod != null) {
            stmt.bindString(4, ArticuloCod);
        }
 
        String ArticuloNombre = entity.getArticuloNombre();
        if (ArticuloNombre != null) {
            stmt.bindString(5, ArticuloNombre);
        }
 
        Integer Cantidad = entity.getCantidad();
        if (Cantidad != null) {
            stmt.bindLong(6, Cantidad);
        }
 
        String UnMedidaCod = entity.getUnMedidaCod();
        if (UnMedidaCod != null) {
            stmt.bindString(7, UnMedidaCod);
        }
 
        String TipoCod = entity.getTipoCod();
        if (TipoCod != null) {
            stmt.bindString(8, TipoCod);
        }
 
        Integer Signo = entity.getSigno();
        if (Signo != null) {
            stmt.bindLong(9, Signo);
        }
 
        Double Precio = entity.getPrecio();
        if (Precio != null) {
            stmt.bindDouble(10, Precio);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RemitoLin readEntity(Cursor cursor, int offset) {
        RemitoLin entity = new RemitoLin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // RemitoId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ArticuloId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ArticuloCod
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ArticuloNombre
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Cantidad
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UnMedidaCod
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TipoCod
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // Signo
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9) // Precio
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RemitoLin entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemitoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setArticuloId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setArticuloCod(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArticuloNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCantidad(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUnMedidaCod(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTipoCod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSigno(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPrecio(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RemitoLin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RemitoLin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
